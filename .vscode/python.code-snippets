{
	"input().split()":{
		"scope":"python",
		"prefix": "is",
		"body": [
			"input().split()"
		],
	},
	"map(int,input().split())":{
		"scope":"python",
		"prefix": "mi",
		"body": [
			"map(int,input().split())"
		],
	},
	"[*map(int,input().split())]":{
		"scope":"python",
		"prefix": "lim",
		"body": [
			"[*map(int,input().split())]"
		],
	},
	"nested loop double":{
		"scope":"python",
		"prefix": "forfor",
		"body": [
			"for i in range(${1:}):",
			"\tfor j in range(${2:}):",
			"\t\t",
		],
	},
	"nested loop triple":{
		"scope":"python",
		"prefix": "forforfor",
		"body": [
			"for i in range(${1:}):",
			"\tfor j in range(${2:}):",
			"\t\tfor k in range(${3:}):",
			"\t\t\t"
		],
	},
	"int(input())":{
		"scope":"python",
		"prefix": "ii",
		"body": [
			"int(input())"
		],
	},
	"enumerate()":{
		"scope":"python",
		"prefix": "enumerate",
		"body": [
			"enumerate(${1:})"
		],
	},
	"input()":{
		"scope":"python",
		"prefix": "input()",
		"body": [
			"input()"
		],
	},
	"map(int,open(0))":{
		"scope":"python",
		"prefix": "mio",
		"body": [
			"map(int,open(0))"
		],
	},
	"map(int,open(0).read().split())":{
		"scope":"python",
		"prefix": "mios",
		"body": [
			"map(int,open(0).read().split())"
		],
	},
	"class DSU:": {
        "scope": "python",
        "prefix": "class DSU:",
        "body": [
			"# Disjoint Set Union library",
            "class DSU:",
            "\tdef __init__(self,n):",
            "\t\tself.parent=[-1]*n",
            "\tdef root(self,x):",
            "\t\tif self.parent[x]<0:return x",
            "\t\tself.parent[x]=self.root(self.parent[x])",
            "\t\treturn self.parent[x]",
            "\tdef merge(self,x,y):",
            "\t\trx=self.root(x)",
            "\t\try=self.root(y)",
            "\t\tif rx==ry:return",
            "\t\tif rx>ry:rx,ry=ry,rx",
            "\t\tself.parent[rx]+=self.parent[ry]",
            "\t\tself.parent[ry]=rx",
            "\tdef size(self,x):",
            "\t\treturn -self.parent[self.root(x)]",
			"\tdef connected(self,x,y):",
			"\t\treturn self.root(x)==self.root(y)",
			"# Disjoint Set Union library",
			"",
        ],
        "description": "Union Find Tree"
    },
}